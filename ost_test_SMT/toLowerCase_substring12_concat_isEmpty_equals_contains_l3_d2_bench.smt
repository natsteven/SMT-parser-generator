(set-logic QF_S)
(set-option :parse-transducers true)
(set-option :produce-models true)
(define-fun-rec toLower ((x String) (y String)) Bool
   (or (and (= x "") (= y ""))
       (and (not (= x "")) (not (= y ""))
           (= (char.code (str.head y))
               (ite (and (<= 65 (char.code (str.head x)))
                       (<= (char.code (str.head x)) 90))
                   (+ (char.code (str.head x)) 32)
                   (char.code (str.head x))))
           (toLower (str.tail x) (str.tail y))))
)
(declare-fun r10 () String)
(declare-fun r11 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(declare-fun r9 () String)
(declare-fun L13  () String)
(declare-fun L7  () String)
(declare-fun L5  () String)
(declare-fun L10  () String)
(declare-fun L6  () String)
(declare-fun L11  () String)
(declare-fun L22  () String)
(declare-fun L1  () String)
(declare-fun L2  () String)
(declare-fun L0  () String)
(declare-fun L17  () String)
(declare-fun L29  () String)
(assert (toLower r7  L29 ))
(assert (toLower (str.substr r10  2 0) L17 ))
(assert (toLower (str.substr r10  1 2) L0 ))
(assert (toLower (str.substr r10  3 0) L2 ))
(assert (toLower r11  L1 ))
(assert (toLower (str.substr r9  0 1) L22 ))
(assert (toLower r9  L11 ))
(assert (toLower (str.substr r10  0 1) L6 ))
(assert (toLower (str.substr r10  2 1) L10 ))
(assert (toLower r10  L5 ))
(assert (toLower L1  L7 ))
(assert (toLower L11  L13 ))

(assert (not (str.contains (str.substr r10  2 0)"A" )))
(assert (= "" (str.substr (str.substr r8  0 1) 0 0)))
(assert (not (= (str.substr (str.++ r9 r7 ) 4 2)"B" )))
(assert (not (= L0 "" )))
(assert (= (str.substr L1  2 0)"" ))
(assert (not (= "" (str.++ r10 r11 ))))
(assert (not (str.contains L2 "B" )))
(assert (not (str.contains (str.substr (str.substr r10  1 2) 0 1)"ba" )))
(assert (not (= (str.substr r8  3 0)"AC" )))
(assert (str.contains (str.++ r10 r7 L1 )"b" ))
(assert (not (= "" (str.substr r10  2 1))))
(assert (not (= "" (str.++ r9 r7 ))))
(assert (not (str.contains (str.++ r9 r10 )"A" )))
(assert (not (str.contains L1 "bc" )))
(assert (not (= L5 "B" )))
(assert (not (str.contains (str.++ "B" r10 )"A" )))
(assert (not (str.contains L6 "AB" )))
(assert (str.contains L7 "a" ))
(assert (str.contains (str.substr r10  1 2)"a" ))
(assert (not (= r11 "a" )))
(assert (not (= "" r10 )))
(assert (str.contains L5 "c" ))
(assert (= "" (str.substr r10  3 0)))
(assert (str.contains L10 "" ))
(assert (not (str.contains (str.++ r11 r7 )"aa" )))
(assert (= "" (str.substr (str.substr r8  3 0) 0 0)))
(assert (str.contains (str.++ r8 r10 )"" ))
(assert (not (= (str.++ "c" (str.++ r9 r10 ))"B" )))
(assert (not (= "" (str.++ "c" r7 ))))
(assert (not (= L11 "ab" )))
(assert (not (= L1 "" )))
(assert (str.contains L13 "" ))
(assert (not (= "" (str.++ (str.substr r11  3 0)L1 ))))
(assert (str.contains L11 "c" ))
(assert (not (= "" (str.++ "b" (str.++ r11 r7 )))))
(assert (not (str.contains L17 "A" )))
(assert (not (= (str.substr r10  0 1)"" )))
(assert (not (= "" (str.++ "C" (str.substr r8  3 0)))))
(assert (not (str.contains (str.substr (str.substr r9  3 0) 0 0)"aa" )))
(assert (str.contains L1 "" ))
(assert (not (= L11 "A" )))
(assert (not (= "" (str.++ "A" L1 ))))
(assert (not (= "" (str.substr L1  0 2))))
(assert (not (= "" (str.substr r8  0 1))))
(assert (not (= (str.++ "b" (str.++ "c" r7 ))"" )))
(assert (not (= (str.++ "a" r7 (str.++ r8 r10 ))"" )))
(assert (not (= (str.substr (str.substr r9  3 0) 0 0)"Ac" )))
(assert (not (= L22 "" )))
(assert (not (= (str.++ r10 r7 )"" )))
(assert (not (= "" r7 )))
(assert (str.contains r8 "" ))
(assert (not (= "" (str.++ "a" r7 ))))
(assert (not (= "" (str.substr L11  0 3))))
(assert (not (str.contains L22 "a" )))
(assert (not (= "" (str.++ "c" r9 ))))
(assert (not (= (str.substr (str.++ r11 r7 ) 6 0)"B" )))
(assert (not (= r9 "" )))
(assert (not (= L1 "" )))
(assert (not (= "" (str.++ r10 r11 L5 ))))
(assert (= "" (str.substr r9  3 0)))
(assert (not (= L13 "" )))
(assert (= (str.substr r11  3 0)"" ))
(assert (not (= (str.substr r9  0 1)"aa" )))
(assert (not (= "" (str.++ "c" (str.++ r11 r7 )))))
(assert (not (= "" L29 )))
(check-sat)
(get-model)
(exit)
