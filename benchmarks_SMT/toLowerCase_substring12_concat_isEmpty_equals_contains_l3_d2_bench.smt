(set-logic ALL)
(set-option :produce-models true)
(declare-fun r10 () String)
(declare-fun r11 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(declare-fun r9 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))

(assert (not (str.contains (str.substr r10  2 0)"A" )))
(assert (= "" (str.substr (str.substr r8  0 1) 0 0)))
(assert (not (= (str.substr (str.++ r9 r7 ) 4 2)"B" )))
(assert (not (= (str.toLower (str.substr r10  1 2))"" )))
(assert (= (str.substr (str.toLower r11 ) 2 0)"" ))
(assert (not (= "" (str.++ r10 r11 ))))
(assert (not (str.contains (str.toLower (str.substr r10  3 0))"B" )))
(assert (not (str.contains (str.substr (str.substr r10  1 2) 0 1)"ba" )))
(assert (not (= (str.substr r8  3 0)"AC" )))
(assert (str.contains (str.++ r10 r7 (str.toLower r11 ))"b" ))
(assert (not (= "" (str.substr r10  2 1))))
(assert (not (= "" (str.++ r9 r7 ))))
(assert (not (str.contains (str.++ r9 r10 )"A" )))
(assert (not (str.contains (str.toLower r11 )"bc" )))
(assert (not (= (str.toLower r10 )"B" )))
(assert (not (str.contains (str.++ "B" r10 )"A" )))
(assert (not (str.contains (str.toLower (str.substr r10  0 1))"AB" )))
(assert (str.contains (str.toLower (str.toLower r11 ))"a" ))
(assert (str.contains (str.substr r10  1 2)"a" ))
(assert (not (= r11 "a" )))
(assert (not (= "" r10 )))
(assert (str.contains (str.toLower r10 )"c" ))
(assert (= "" (str.substr r10  3 0)))
(assert (str.contains (str.toLower (str.substr r10  2 1))"" ))
(assert (not (str.contains (str.++ r11 r7 )"aa" )))
(assert (= "" (str.substr (str.substr r8  3 0) 0 0)))
(assert (str.contains (str.++ r8 r10 )"" ))
(assert (not (= (str.++ "c" (str.++ r9 r10 ))"B" )))
(assert (not (= "" (str.++ "c" r7 ))))
(assert (not (= (str.toLower r9 )"ab" )))
(assert (not (= (str.toLower r11 )"" )))
(assert (str.contains (str.toLower (str.toLower r9 ))"" ))
(assert (not (= "" (str.++ (str.substr r11  3 0)(str.toLower r11 )))))
(assert (str.contains (str.toLower r9 )"c" ))
(assert (not (= "" (str.++ "b" (str.++ r11 r7 )))))
(assert (not (str.contains (str.toLower (str.substr r10  2 0))"A" )))
(assert (not (= (str.substr r10  0 1)"" )))
(assert (not (= "" (str.++ "C" (str.substr r8  3 0)))))
(assert (not (str.contains (str.substr (str.substr r9  3 0) 0 0)"aa" )))
(assert (str.contains (str.toLower r11 )"" ))
(assert (not (= (str.toLower r9 )"A" )))
(assert (not (= "" (str.++ "A" (str.toLower r11 )))))
(assert (not (= "" (str.substr (str.toLower r11 ) 0 2))))
(assert (not (= "" (str.substr r8  0 1))))
(assert (not (= (str.++ "b" (str.++ "c" r7 ))"" )))
(assert (not (= (str.++ "a" r7 (str.++ r8 r10 ))"" )))
(assert (not (= (str.substr (str.substr r9  3 0) 0 0)"Ac" )))
(assert (not (= (str.toLower (str.substr r9  0 1))"" )))
(assert (not (= (str.++ r10 r7 )"" )))
(assert (not (= "" r7 )))
(assert (str.contains r8 "" ))
(assert (not (= "" (str.++ "a" r7 ))))
(assert (not (= "" (str.substr (str.toLower r9 ) 0 3))))
(assert (not (str.contains (str.toLower (str.substr r9  0 1))"a" )))
(assert (not (= "" (str.++ "c" r9 ))))
(assert (not (= (str.substr (str.++ r11 r7 ) 6 0)"B" )))
(assert (not (= r9 "" )))
(assert (not (= (str.toLower r11 )"" )))
(assert (not (= "" (str.++ r10 r11 (str.toLower r10 )))))
(assert (= "" (str.substr r9  3 0)))
(assert (not (= (str.toLower (str.toLower r9 ))"" )))
(assert (= (str.substr r11  3 0)"" ))
(assert (not (= (str.substr r9  0 1)"aa" )))
(assert (not (= "" (str.++ "c" (str.++ r11 r7 )))))
(assert (not (= "" (str.toLower r7 ))))
(check-sat)
(get-model)
(exit)
