(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))
(define-fun str.del ((x String) (a Int) (b Int)) String
  (str.++ (str.substr x 0 a) (str.substr x b (str.len x))))

(assert (not (= "CC" (str.++ "B" (str.del r4  0 1)))))
(assert (= "" (str.del (str.del (str.del r4  0 1) 2 2) 0 2)))
(assert (not (= "" (str.++ "C" (str.++ "B" r8 (str.++ r8 r7 ))))))
(assert (not (= "" (str.++ "B" r8 (str.++ r8 r7 )))))
(assert (not (= "CB" (str.++ "B" (str.++ r4 r7 (str.++ r4 r5 ))))))
(assert (not (str.contains "CC" (str.++ (str.del r7  2 2)(str.del r7  2 3)))))
(assert (not (= "" (str.del (str.++ "A" r6 ) 0 0))))
(assert (not (str.contains "BA" (str.++ "B" (str.++ r4 r7 (str.++ r4 r5 ))))))
(assert (str.contains "A" (str.++ r8 r7 )))
(assert (not (str.contains "AA" (str.del (str.++ "A" r4 ) 3 4))))
(assert (not (= "" (str.++ r8 r5 ))))
(assert (= "" (str.del (str.del r8  1 3) 0 1)))
(assert (not (= "" (str.++ r4 r7 (str.++ r4 r5 )))))
(assert (not (= "" (str.del (str.del r7  2 3) 1 1))))
(assert (not (= "B" (str.++ (str.del r4  2 3)(str.++ r8 r5 )))))
(assert (not (= "" (str.++ (str.del r8  1 3)(str.del r6  1 3)))))
(assert (str.contains "" (str.del (str.++ "B" (str.del r4  0 1)) 0 3)))
(assert (not (= "" r4 )))
(assert (not (= "" (str.del r7  2 2))))
(assert (str.contains "" r8 ))
(assert (not (= "" r7 )))
(assert (not (= "" (str.del r5  0 0))))
(assert (not (= "" (str.del r4  1 3))))
(assert (str.contains "B" (str.++ "B" (str.del r4  0 1)(str.del (str.++ "A" r6 ) 0 0))))
(assert (not (= "" (str.del r6  1 3))))
(assert (not (= "" (str.del (str.++ r4 r7 (str.++ r4 r5 )) 10 11))))
(assert (not (= "" (str.++ "A" r4 ))))
(assert (not (= "" (str.del (str.++ "A" (str.++ r4 r5 )) 6 6))))
(assert (not (= "" (str.del r4  0 1))))
(assert (not (str.contains "BC" (str.++ "A" r8 ))))
(assert (not (= "" (str.del (str.++ "C" r7 ) 4 4))))
(assert (not (str.contains "BA" (str.++ "C" (str.++ "A" (str.del r5  0 0))))))
(assert (str.contains "" (str.++ "B" (str.++ r8 r7 ))))
(assert (not (= "" (str.++ "A" r6 ))))
(assert (not (= "" (str.++ (str.del (str.del r7  2 3) 1 1)(str.del (str.++ r8 r7 ) 6 6)))))
(assert (not (str.contains "B" (str.del (str.++ "A" (str.++ r4 r5 )) 2 5))))
(assert (not (= "" (str.del (str.del r4  0 1) 2 2))))
(assert (not (= "" (str.++ (str.del (str.++ r4 r7 ) 6 6)(str.++ "A" (str.++ r4 r5 ))))))
(assert (not (str.contains "CC" (str.++ (str.del (str.del r4  0 1) 2 2)(str.del (str.del r7  2 3) 1 1)))))
(assert (not (= "" (str.del r7  2 3))))
(assert (str.contains "A" (str.++ "B" r7 )))
(assert (not (= "" (str.del (str.++ "B" r8 (str.++ r8 r7 )) 6 6))))
(assert (str.contains "A" (str.++ "A" (str.++ r4 r5 ))))
(assert (not (= "B" (str.++ r4 r5 ))))
(assert (not (= "C" (str.del (str.++ r4 r7 (str.++ r4 r5 )) 9 11))))
(assert (not (= "B" (str.del (str.del (str.++ "A" r8 ) 3 4) 0 1))))
(assert (not (= "" (str.del (str.++ "A" (str.++ r4 r5 )) 7 7))))
(assert (str.contains "B" (str.++ r4 r7 )))
(assert (not (= "BB" r6 )))
(assert (not (= "" r5 )))
(assert (str.contains "B" (str.del (str.++ "A" r8 ) 3 4)))
(assert (not (= "" (str.++ "A" (str.++ (str.del r7  2 2)(str.++ "B" r8 ))))))
(assert (not (= "BB" (str.++ (str.del r7  2 2)(str.++ "B" r8 )))))
(assert (not (= "" (str.del r4  2 3))))
(assert (not (= "" (str.++ "A" (str.del r5  0 0)))))
(assert (not (= "" (str.++ "B" r8 ))))
(assert (not (= "" (str.del (str.++ r8 r7 ) 6 6))))
(assert (not (= "" (str.del (str.++ (str.del r7  2 2)(str.++ "B" r8 )) 6 6))))
(assert (not (= "" (str.del r7  2 3))))
(assert (= "" (str.del (str.del r4  1 3) 0 1)))
(assert (str.contains "A" (str.++ "C" r7 )))
(assert (str.contains "" (str.del r8  1 3)))
(assert (not (str.contains "BA" (str.del (str.++ r4 r7 ) 6 6))))
(assert (not (= "B" (str.del r4  0 1))))
(check-sat)
