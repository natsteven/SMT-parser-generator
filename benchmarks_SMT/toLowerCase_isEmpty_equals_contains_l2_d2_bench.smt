(declare-fun r10 () String)
(declare-fun r11 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(declare-fun r9 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))

(assert "A" )
(assert "B" )
(assert "C" )
(assert "a" )
(assert "b" )
(assert "c" )
(assert (not (= "" (str.toLower (str.toLower r10 )))))
(assert (not (= "B" r9 )))
(assert (not (= "BB" (str.toLower (str.toLower r9 )))))
(assert (not (= "" (str.toLower r8 ))))
(assert (not (= "" (str.toLower r9 ))))
(assert (not (= "" (str.toLower r10 ))))
(assert (not (= "" (str.toLower (str.toLower r8 )))))
(assert (not (str.contains "bb" (str.toLower r9 ))))
(assert (not (= "c" (str.toLower r10 ))))
(assert (not (str.contains "aa" (str.toLower r9 ))))
(assert (not (= "" r10 )))
(assert (not (str.contains "A" (str.toLower (str.toLower r9 )))))
(assert (not (= "" r7 )))
(assert (not (= "" (str.toLower (str.toLower r9 )))))
(assert (not (= "" (str.toLower (str.toLower r7 )))))
(assert (not (= "" (str.toLower (str.toLower r7 )))))
(assert (not (str.contains "B" (str.toLower (str.toLower r7 )))))
(assert (not (str.contains "cA" (str.toLower r7 ))))
(assert (not (str.contains "ba" r8 )))
(assert (not (= "" (str.toLower r10 ))))
(assert (not (= "" (str.toLower (str.toLower r10 )))))
(assert (not (str.contains "AB" (str.toLower (str.toLower r8 )))))
(assert (not (= "" r11 )))
(assert (not (= "" (str.toLower r7 ))))
(assert (not (= "" (str.toLower r7 ))))
(check-sat)
