(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))

(assert r4 )
(assert r5 )
(assert r6 )
(assert r7 )
(assert r8 )
(assert (not (= "CB" (str.replace_all r4  "C"  "B" ))))
(assert (not (= "B" r8 )))
(assert (not (= "" r7 )))
(assert (not (= "" (str.replace_all r7  "C"  "B" ))))
(assert (not (= "" (str.replace_all (str.replace_all r7  "B"  "C" ) "C"  "A" ))))
(assert (not (= "" r4 )))
(assert (not (str.contains "B" (str.replace_all (str.replace_all r7  "B"  "C" ) "B"  "C" ))))
(assert (not (= "" (str.replace_all (str.replace_all r7  "A"  "C" ) "B"  "A" ))))
(assert (not (= "" r6 )))
(assert (not (= "" (str.replace_all r7  "B"  "C" ))))
(assert (str.contains "" (str.replace_all (str.replace_all r6  "B"  "C" ) "C"  "B" )))
(assert (str.contains "" (str.replace_all r5  "A"  "B" )))
(assert (not (= "" (str.replace_all r4  "C"  "B" ))))
(assert (not (str.contains "B" (str.replace_all r5  "A"  "B" ))))
(assert (not (= "A" (str.replace_all (str.replace_all r7  "C"  "B" ) "A"  "B" ))))
(assert (not (= "BB" (str.replace_all (str.replace_all r5  "A"  "B" ) "A"  "C" ))))
(assert (not (= "" (str.replace_all (str.replace_all r6  "C"  "A" ) "A"  "C" ))))
(assert (not (= "BC" (str.replace_all (str.replace_all r6  "C"  "A" ) "B"  "C" ))))
(assert (not (str.contains "BB" r5 )))
(assert (not (= "" (str.replace_all r7  "A"  "C" ))))
(assert (not (= "" (str.replace_all r6  "B"  "C" ))))
(assert (not (str.contains "B" (str.replace_all r6  "A"  "C" ))))
(assert (not (str.contains "AA" (str.replace_all (str.replace_all r4  "C"  "B" ) "C"  "A" ))))
(assert (not (= "" (str.replace_all r6  "C"  "A" ))))
(assert (not (= "" (str.replace_all (str.replace_all r4  "C"  "B" ) "B"  "A" ))))
(check-sat)
