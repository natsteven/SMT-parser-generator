(set-logic QF_S)
(set-option :produce-models true)
(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)

(assert (not (= (str.++ "B" (str.substr r4  0 1))"CC" )))
(assert (= "" (str.substr (str.substr (str.substr r4  0 1) 0 1) 1 0)))
(assert (not (= (str.++ "C" (str.++ "B" r8 (str.++ r8 r7 )))"" )))
(assert (not (= "" (str.++ "B" r8 (str.++ r8 r7 )))))
(assert (not (= (str.++ "B" (str.++ r4 r7 (str.++ r4 r5 )))"CB" )))
(assert (not (str.contains (str.++ (str.substr r7  2 0)(str.substr r7  2 1))"CC" )))
(assert (= (str.substr (str.++ "A" r6 ) 0 0)"" ))
(assert (not (str.contains (str.++ "B" (str.++ r4 r7 (str.++ r4 r5 )))"BA" )))
(assert (str.contains (str.++ r8 r7 )"A" ))
(assert (not (str.contains (str.substr (str.++ "A" r4 ) 3 1)"AA" )))
(assert (not (= (str.++ r8 r5 )"" )))
(assert (not (= (str.substr (str.substr r8  1 2) 0 1)"" )))
(assert (not (= (str.++ r4 r7 (str.++ r4 r5 ))"" )))
(assert (= "" (str.substr (str.substr r7  2 1) 1 0)))
(assert (not (= (str.++ (str.substr r4  2 1)(str.++ r8 r5 ))"B" )))
(assert (not (= (str.++ (str.substr r8  1 2)(str.substr r6  1 2))"" )))
(assert (str.contains (str.substr (str.++ "B" (str.substr r4  0 1)) 0 1)"" ))
(assert (not (= "" r4 )))
(assert (= "" (str.substr r7  2 0)))
(assert (str.contains r8 "" ))
(assert (not (= r7 "" )))
(assert (= "" (str.substr r5  0 0)))
(assert (not (= (str.substr r4  1 2)"" )))
(assert (str.contains (str.++ "B" (str.substr r4  0 1)(str.substr (str.++ "A" r6 ) 0 0))"B" ))
(assert (not (= "" (str.substr r6  1 2))))
(assert (not (= "" (str.substr (str.++ r4 r7 (str.++ r4 r5 )) 10 1))))
(assert (not (= "" (str.++ "A" r4 ))))
(assert (= (str.substr (str.++ "A" (str.++ r4 r5 )) 6 0)"" ))
(assert (not (= (str.substr r4  0 1)"" )))
(assert (not (str.contains (str.++ "A" r8 )"BC" )))
(assert (= "" (str.substr (str.++ "C" r7 ) 4 0)))
(assert (not (str.contains (str.++ "C" (str.++ "A" (str.substr r5  0 0)))"BA" )))
(assert (str.contains (str.++ "B" (str.++ r8 r7 ))"" ))
(assert (not (= "" (str.++ "A" r6 ))))
(assert (= "" (str.++ (str.substr (str.substr r7  2 1) 1 0)(str.substr (str.++ r8 r7 ) 6 0))))
(assert (str.contains (str.substr (str.++ "A" (str.++ r4 r5 )) 2 3)"B" ))
(assert (not (= "" (str.substr (str.substr r4  0 1) 0 1))))
(assert (not (= "" (str.++ (str.substr (str.++ r4 r7 ) 6 0)(str.++ "A" (str.++ r4 r5 ))))))
(assert (not (str.contains (str.++ (str.substr (str.substr r4  0 1) 0 1)(str.substr (str.substr r7  2 1) 1 0))"CC" )))
(assert (not (= "" (str.substr r7  2 1))))
(assert (str.contains (str.++ "B" r7 )"A" ))
(assert (= "" (str.substr (str.++ "B" r8 (str.++ r8 r7 )) 6 0)))
(assert (str.contains (str.++ "A" (str.++ r4 r5 ))"A" ))
(assert (not (= (str.++ r4 r5 )"B" )))
(assert (not (= (str.++ "B" r8 (str.++ r8 r7 )(str.++ "B" (str.++ r8 r7 )))"" )))
(assert (not (= (str.substr (str.++ r4 r7 (str.++ r4 r5 )) 9 2)"C" )))
(assert (not (= (str.substr (str.substr (str.++ "A" r8 ) 3 1) 0 0)"B" )))
(assert (= (str.substr (str.++ "A" (str.++ r4 r5 )) 7 0)"" ))
(assert (str.contains (str.++ r4 r7 )"B" ))
(assert (not (= r6 "BB" )))
(assert (not (= "" r5 )))
(assert (not (str.contains (str.substr (str.++ "A" r8 ) 3 1)"B" )))
(assert (not (= "" (str.++ "A" (str.++ (str.substr r7  2 0)(str.++ "B" r8 ))))))
(assert (not (= (str.++ (str.substr r7  2 0)(str.++ "B" r8 ))"BB" )))
(assert (not (= (str.substr r4  2 1)"" )))
(assert (not (= "" (str.++ "A" (str.substr r5  0 0)))))
(assert (not (= "" (str.++ "B" r8 ))))
(assert (= "" (str.substr (str.++ r8 r7 ) 6 0)))
(assert (= "" (str.substr (str.++ (str.substr r7  2 0)(str.++ "B" r8 )) 3 0)))
(assert (not (= (str.substr r7  2 1)"" )))
(assert (not (= "" (str.substr (str.substr r4  1 2) 0 1))))
(assert (str.contains (str.++ "C" r7 )"A" ))
(assert (str.contains (str.substr r8  1 2)"" ))
(assert (not (str.contains (str.substr (str.++ r4 r7 ) 6 0)"BA" )))
(assert (not (= (str.substr r4  0 1)"B" )))
(check-sat)
(get-model)
(exit)
