(declare-fun r4 () String)
(declare-fun r5 () String)
(declare-fun r6 () String)
(declare-fun r7 () String)
(declare-fun r8 () String)
(define-fun-rec str.toLower ((x String)) String
  (ite (= x "")
      ""
      (let ((Head (str.at x 0)))
        (str.++ 
          (ite (and (<= 65 (str.to_code Head)) 
                     (<= (str.to_code Head) 90))
               (str.from_code (+ (str.to_code Head) 32))
               Head)
          (str.toLower (str.substr x 1 (- (str.len x) 1)))))))
(define-fun str.del ((x String) (a Int) (b Int)) String
  (str.++ (str.substr x 0 a) (str.substr x b (str.len x))))

(assert (not (= "BC" (str.del (str.del r4  2 2) 0 2))))
(assert (not (= "BB" (str.del (str.del r7  2 2) 2 2))))
(assert (str.contains "C" (str.del (str.del r6  1 1) 2 2)))
(assert (not (= "A" r7 )))
(assert (not (= "" r6 )))
(assert (not (= "" r8 )))
(assert (not (= "" (str.del r4  2 2))))
(assert (not (str.contains "B" r5 )))
(assert (not (= "BB" r4 )))
(assert (not (= "" (str.del r7  1 1))))
(assert (str.contains "" (str.del (str.del r6  1 1) 2 2)))
(assert (= "" (str.del (str.del r6  1 1) 0 2)))
(assert (str.contains "" (str.del r4  2 2)))
(assert (not (= "" (str.del r7  1 2))))
(assert (not (= "A" (str.del (str.del r7  1 2) 0 0))))
(assert (not (= "" (str.del (str.del r6  2 2) 0 0))))
(assert (str.contains "B" (str.del (str.del r7  1 2) 1 1)))
(assert (= "" (str.del (str.del r7  1 2) 0 1)))
(assert (not (= "" (str.del r7  2 2))))
(assert (not (= "" (str.del r6  2 2))))
(assert (str.contains "" (str.del r5  0 1)))
(assert (not (= "B" (str.del r6  2 2))))
(assert (str.contains "" (str.del r6  1 1)))
(assert (not (= "" (str.del (str.del r6  2 2) 1 2))))
(assert (not (= "B" (str.del r6  0 2))))
(check-sat)
