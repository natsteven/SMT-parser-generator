(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Murphy Berzish, Mitja Kulczynski, Federico Mora, Florin Manea, Joel Day, Dirk Nowotka, Vijay Ganesh, Zhengyang Lu
Generated on: 2020-10-01
Description: Translated from a collection of real-world regex queries, AutomataArk, collected by Loris Dâ€™Antoni and Fang Wang: https://github.com/lorisdanto/automatark
Application: Evaluate solvers on real-world regex queries
Target solver: Z3str3RE, CVC4, OSTRICH, Z3seq, Z3str3, Z3-Trau
Publications: Berzish, M., Kulczynski, M., Mora, F., Manea, F., Day, J. D., Nowotka, D., & Ganesh, V. (2021, July). An SMT solver for regular expressions and linear arithmetic over string length. In CAV 2021.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)

(declare-const X String)
(assert (str.in_re X (re.++ (re.opt (re.++ (re.union (str.to_re "http") (str.to_re "https") (str.to_re "ftp") (str.to_re "telnet") (str.to_re "gopher") (str.to_re "ms-help") (str.to_re "file") (str.to_re "notes")) (str.to_re "://"))) (re.opt (re.++ (re.opt (re.++ (str.to_re ":") (re.* re.allchar))) (str.to_re "@") (re.range "a" "z") (re.* (re.union (str.to_re "~") (str.to_re "%") (str.to_re "!") (str.to_re "&") (str.to_re "'") (str.to_re ",") (str.to_re ";") (str.to_re "=") (str.to_re "-") (str.to_re ".") (str.to_re "$") (str.to_re "(") (str.to_re ")") (str.to_re "*") (str.to_re "+") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))))) (re.opt (re.++ (re.* (re.++ (re.union (re.range "a" "z") (re.range "0" "9")) (re.* (re.union (str.to_re "-") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))) (re.* (re.union (re.range "a" "z") (re.range "0" "9"))) (str.to_re "."))) (re.union (re.++ (re.opt (re.++ (str.to_re ".") (re.+ (re.union (re.range "a" "z") (re.range "0" "9"))))) (re.union (re.range "a" "z") (re.range "0" "9")) (re.* (re.union (str.to_re "-") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))) (re.* (re.union (re.range "a" "z") (re.range "0" "9")))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re "25") (re.range "0" "5")) (re.++ (str.to_re "2") (re.range "0" "4") (re.range "0" "9")) (re.++ (re.opt (re.union (str.to_re "0") (str.to_re "1"))) (re.range "0" "9") (re.opt (re.range "0" "9")))) (str.to_re "."))) (re.union (re.++ (str.to_re "25") (re.range "0" "5")) (re.++ (str.to_re "2") (re.range "0" "4") (re.range "0" "9")) (re.++ (re.opt (re.union (str.to_re "0") (str.to_re "1"))) (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.opt (re.++ (str.to_re ":") (re.+ (re.range "0" "9")))))) (re.opt (re.++ (re.opt (re.++ (str.to_re "?") (re.+ (re.comp (str.to_re "#"))))) (re.opt (re.++ (str.to_re "#") (re.union (re.range "a" "z") (re.range "0" "9")) (re.* (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))))) (re.* (re.++ (str.to_re "/") (re.+ (re.union (re.++ (str.to_re "%") (re.range "0" "9") (re.range "0" "9")) (str.to_re "`") (str.to_re "~") (str.to_re "!") (str.to_re "$") (str.to_re "=") (str.to_re ";") (str.to_re "-") (str.to_re "+") (str.to_re ".") (str.to_re "^") (str.to_re "(") (str.to_re ")") (str.to_re "|") (str.to_re "{") (str.to_re "}") (str.to_re "[") (str.to_re "]") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))))) (str.to_re "/") (re.* (re.union (re.++ (str.to_re "%") (re.range "0" "9") (re.range "0" "9")) (str.to_re "`") (str.to_re "~") (str.to_re "!") (str.to_re "$") (str.to_re "=") (str.to_re ";") (str.to_re "-") (str.to_re "+") (str.to_re ".") (str.to_re "^") (str.to_re "(") (str.to_re ")") (str.to_re "|") (str.to_re "{") (str.to_re "}") (str.to_re "[") (str.to_re "]") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))))) (str.to_re "\u{a}"))))
(assert (not (str.in_re X (re.++ (str.to_re "www.iggsey.com") (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}")) (str.to_re "X-Mailer:\u{13}Computeron:com>2.41\u{a}")))))
(assert (not (str.in_re X (re.++ (str.to_re "Windows") (re.+ (re.range "0" "9")) (str.to_re "BlackFiltereddaosearch.com\u{a}")))))
(assert (not (str.in_re X (str.to_re "ZC-BridgeHost:Subject:as.starware.com\u{a}"))))
(assert (str.in_re X (re.++ ((_ re.loop 1 1) (str.to_re "0")) ((_ re.loop 2 2) (re.range "1" "9")) (re.union (str.to_re "-") (re.opt re.allchar) (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}")) ((_ re.loop 3 3) (re.range "0" "9")) (re.union (str.to_re "-") (re.opt re.allchar) (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}")) ((_ re.loop 2 2) (re.range "0" "9")) (re.union (str.to_re "-") (re.opt re.allchar) (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}")) ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "\u{a}"))))
(check-sat)

(exit)
