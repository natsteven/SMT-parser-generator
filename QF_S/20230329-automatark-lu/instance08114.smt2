(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Murphy Berzish, Mitja Kulczynski, Federico Mora, Florin Manea, Joel Day, Dirk Nowotka, Vijay Ganesh, Zhengyang Lu
Generated on: 2020-10-01
Description: Translated from a collection of real-world regex queries, AutomataArk, collected by Loris Dâ€™Antoni and Fang Wang: https://github.com/lorisdanto/automatark
Application: Evaluate solvers on real-world regex queries
Target solver: Z3str3RE, CVC4, OSTRICH, Z3seq, Z3str3, Z3-Trau
Publications: Berzish, M., Kulczynski, M., Mora, F., Manea, F., Day, J. D., Nowotka, D., & Ganesh, V. (2021, July). An SMT solver for regular expressions and linear arithmetic over string length. In CAV 2021.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-const X String)
(assert (not (str.in_re X (re.++ (str.to_re "www.actualnames.com") (re.+ (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}"))) (str.to_re "toolbar_domain_redirect") (re.+ (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}"))) (str.to_re "Contactfrom=GhostVoiceServer\u{a}")))))
(assert (str.in_re X (re.++ (str.to_re "URLBlaze") (re.* re.allchar) (str.to_re "User-Agent:") (re.* re.allchar) (str.to_re "mPOPUser-Agent:\u{a}"))))
(assert (str.in_re X (re.union ((_ re.loop 1 1) (re.range "1" "9")) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "0" "9"))) (str.to_re "9999\u{a}"))))
(assert (not (str.in_re X (re.++ ((_ re.loop 1 1) (re.union (str.to_re "-") (str.to_re "'") (str.to_re "+") (str.to_re "*") (str.to_re "$") (str.to_re "^") (str.to_re "&") (str.to_re "%") (str.to_re "=") (str.to_re "~") (str.to_re "!") (str.to_re "?") (str.to_re "{") (str.to_re "}") (str.to_re "#") (str.to_re "|") (str.to_re "/") (str.to_re "`") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))) ((_ re.loop 0 31) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "'") (str.to_re "+") (str.to_re "*") (str.to_re "$") (str.to_re "^") (str.to_re "&") (str.to_re "%") (str.to_re "=") (str.to_re "~") (str.to_re "!") (str.to_re "?") (str.to_re "{") (str.to_re "}") (str.to_re "#") (str.to_re "|") (str.to_re "`") (str.to_re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))) ((_ re.loop 1 1) (re.union (str.to_re "-") (str.to_re "'") (str.to_re "+") (str.to_re "*") (str.to_re "$") (str.to_re "^") (str.to_re "&") (str.to_re "%") (str.to_re "=") (str.to_re "~") (str.to_re "!") (str.to_re "?") (str.to_re "{") (str.to_re "}") (str.to_re "#") (str.to_re "|") (str.to_re "`") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))))) (re.opt (re.union (str.to_re "-") (str.to_re "'") (str.to_re "+") (str.to_re "*") (str.to_re "$") (str.to_re "^") (str.to_re "&") (str.to_re "%") (str.to_re "=") (str.to_re "~") (str.to_re "!") (str.to_re "?") (str.to_re "{") (str.to_re "}") (str.to_re "#") (str.to_re "|") (str.to_re "`") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "_"))) (str.to_re "@") (re.+ (re.++ ((_ re.loop 1 1) (str.to_re ".")) ((_ re.loop 1 1) (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9"))) ((_ re.loop 0 31) (re.++ (re.opt (re.union (str.to_re "-") (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9"))) ((_ re.loop 1 1) (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9"))))))) ((_ re.loop 1 1) (re.union ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.range "A" "Z"))) ((_ re.loop 3 3) (re.union (re.range "a" "z") (re.range "A" "Z"))) ((_ re.loop 4 4) (re.union (re.range "a" "z") (re.range "A" "Z"))) ((_ re.loop 6 6) (re.union (re.range "a" "z") (re.range "A" "Z"))))) (str.to_re "\u{a}")))))
(assert (not (str.in_re X (re.++ (str.to_re "/.mkv") (re.union (str.to_re "?") (str.to_re "\u{5c}") (str.to_re "/")) (str.to_re "/smiU\u{a}")))))
(check-sat)

(exit)
